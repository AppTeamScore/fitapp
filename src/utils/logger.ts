/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */

export type LogLevel = 'debug' | 'info' | 'warn' | 'error';

interface LogEntry {
  timestamp: string;
  level: LogLevel;
  message: string;
  context?: Record<string, any>;
  error?: Error;
}

export class Logger {
  private static instance: Logger;
  private logLevel: LogLevel = 'info';
  private isDevelopment: boolean = import.meta.env?.MODE === 'development';

  private constructor() {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (this.isDevelopment) {
      this.logLevel = 'debug';
    }
  }

  static getInstance(): Logger {
    if (!Logger.instance) {
      Logger.instance = new Logger();
    }
    return Logger.instance;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
   */
  private formatMessage(level: LogLevel, message: string, context?: Record<string, any>): string {
    const timestamp = new Date().toISOString();
    const contextStr = context ? ` | Context: ${JSON.stringify(context)}` : '';
    return `[${timestamp}] ${level.toUpperCase()}: ${message}${contextStr}`;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private log(level: LogLevel, message: string, context?: Record<string, any>, error?: Error): void {
    if (this.shouldLog(level)) {
      const formattedMessage = this.formatMessage(level, message, context);
      
      // –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
      switch (level) {
        case 'debug':
          console.debug(formattedMessage, error || '');
          break;
        case 'info':
          console.info(formattedMessage, error || '');
          break;
        case 'warn':
          console.warn(formattedMessage, error || '');
          break;
        case 'error':
          console.error(formattedMessage, error || '');
          break;
      }

      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∫ –æ–±—ä–µ–∫—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
      if (this.isDevelopment) {
        const logEntry: LogEntry = {
          timestamp: new Date().toISOString(),
          level,
          message,
          context,
          error
        };
        console.groupCollapsed(`üìù ${level.toUpperCase()}: ${message}`);
        console.log('Log Entry:', logEntry);
        if (context) console.log('Context:', context);
        if (error) console.log('Error:', error);
        console.groupEnd();
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
   */
  private shouldLog(level: LogLevel): boolean {
    const levels: LogLevel[] = ['debug', 'info', 'warn', 'error'];
    return levels.indexOf(level) >= levels.indexOf(this.logLevel);
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  setLevel(level: LogLevel): void {
    this.logLevel = level;
    this.info(`–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å: ${level}`);
  }

  /**
   * –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  debug(message: string, context?: Record<string, any>): void {
    this.log('debug', message, context);
  }

  info(message: string, context?: Record<string, any>): void {
    this.log('info', message, context);
  }

  warn(message: string, context?: Record<string, any>): void {
    this.log('warn', message, context);
  }

  error(message: string, error?: Error, context?: Record<string, any>): void {
    this.log('error', message, context, error);
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
   */
  startFunction(functionName: string, context?: Record<string, any>): void {
    this.debug(`üöÄ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏: ${functionName}`, context);
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
   */
  endFunction(functionName: string, duration?: number, context?: Record<string, any>): void {
    const durationStr = duration ? ` (${duration}ms)` : '';
    this.debug(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${functionName}${durationStr}`, context);
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç API –∑–∞–ø—Ä–æ—Å—ã
   */
  logApiRequest(url: string, method: string, data?: any, headers?: Record<string, string>): void {
    this.debug(`üåê API –ó–∞–ø—Ä–æ—Å: ${method} ${url}`, { data, headers });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç API –æ—Ç–≤–µ—Ç—ã
   */
  logApiResponse(url: string, method: string, status: number, response?: any, duration?: number): void {
    const durationStr = duration ? ` (${duration}ms)` : '';
    this.debug(`üåê API –û—Ç–≤–µ—Ç: ${method} ${url} - ${status}${durationStr}`, { response });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ API
   */
  logApiError(url: string, method: string, error: Error, status?: number): void {
    this.error(`üåê API –û—à–∏–±–∫–∞: ${method} ${url}`, error, { status });
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  logUserAction(action: string, context?: Record<string, any>): void {
    this.info(`üë§ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${action}`, context);
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  logAppState(state: string, context?: Record<string, any>): void {
    this.debug(`üì± –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${state}`, context);
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
   */
  logPerformance(operation: string, duration: number, context?: Record<string, any>): void {
    this.debug(`‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${operation} –∑–∞–Ω—è–ª–∞ ${duration}ms`, context);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
export const logger = Logger.getInstance();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
export default Logger;